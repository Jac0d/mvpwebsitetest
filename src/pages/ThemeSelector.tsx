import React, { useState } from 'react';
import { 
  Box, 
  Typography, 
  Button, 
  Paper, 
  Card, 
  CardContent, 
  CardActions,
  IconButton,
  Chip,
  TextField,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider
} from '@mui/material';
import { Layout } from '../components/layout/Layout';
import { useTheme } from '../context/ThemeContext';
import { createButtonStyles } from '../styles/buttonStyles';
import { themePresets } from '../theme';
import SchoolIcon from '@mui/icons-material/School';
import PaletteIcon from '@mui/icons-material/Palette';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import AddIcon from '@mui/icons-material/Add';
import SaveIcon from '@mui/icons-material/Save';
import PeopleIcon from '@mui/icons-material/People';

import MenuBookIcon from '@mui/icons-material/MenuBook';
import PersonIcon from '@mui/icons-material/Person';
import BuildIcon from '@mui/icons-material/Build';
import SettingsIcon from '@mui/icons-material/Settings';
import { generateColorPalette, EssentialColors } from '../utils/colorUtils';

const themeDisplayNames: Record<string, string> = {
  default: 'Teal Classic'
};

export default function ThemeSelector() {
  const { currentTheme, setTheme, colors, customThemes, saveCustomTheme, deleteCustomTheme } = useTheme();
  const buttonStyles = createButtonStyles(colors);
  
  // Custom theme creation state - simplified to only essential colors
  const [customTheme, setCustomTheme] = useState({
    name: '',
    essentialColors: {
      primary: '#4ecdc4',
      secondary: '#269b96', 
      containerPaper: '#f8fafc',
      sideMenu: '#1a1a1a',
      iconPrimary: '#4ecdc4'
    }
  });
  const [isCreatingCustom, setIsCreatingCustom] = useState(false);
  const [previewCustom, setPreviewCustom] = useState(false);

  // Helper functions for custom theme creation  
  const handleEssentialColorChange = (colorKey: string, value: string) => {
    setCustomTheme(prev => ({
      ...prev,
      essentialColors: {
        ...prev.essentialColors,
        [colorKey]: value
      }
    }));
  };

  const resetCustomTheme = () => {
    setCustomTheme({
      name: '',
      essentialColors: {
        primary: '#4ecdc4',
        secondary: '#269b96', 
        containerPaper: '#f8fafc',
        sideMenu: '#1a1a1a',
        iconPrimary: '#4ecdc4'
      }
    });
    setPreviewCustom(false);
  };

  const applyCustomTheme = () => {
    if (customTheme.name.trim()) {
      // Generate full color palette from essential colors
      const fullColorPalette = generateColorPalette(customTheme.essentialColors);
      // Save the custom theme
      saveCustomTheme(customTheme.name.trim(), fullColorPalette);
      // Apply the custom theme
      setTheme(customTheme.name.trim());
      // Show success feedback
      setPreviewCustom(true);
    }
  };

  // Simplified to just the 5 essential colors
  const essentialColorFields = [
    { 
      key: 'primary', 
      label: 'Primary Buttons', 
      description: 'Main action buttons and primary UI elements',
      autoGenerated: ['hover states']
    },
    { 
      key: 'secondary', 
      label: 'Secondary Buttons', 
      description: 'Secondary action buttons and accents',
      autoGenerated: ['hover states']
    },
    { 
      key: 'containerPaper', 
      label: 'Container Papers', 
      description: 'Section containers and grouping elements (light blue backgrounds)',
      autoGenerated: ['border shades']
    },
    { 
      key: 'sideMenu', 
      label: 'Sidebar Background', 
      description: 'Main sidebar navigation background',
      autoGenerated: ['hover states', 'text color']
    },
    { 
      key: 'iconPrimary', 
      label: 'Icons', 
      description: 'Primary icons throughout the application',
      autoGenerated: ['secondary icons']
    }
  ];

  // Get all available themes (default + custom)
  const allThemes = { default: themePresets.default, ...customThemes };

  const CustomThemeCard = ({ themeName }: { themeName: string }) => {
    const themeColors = customThemes[themeName];
    const themeButtons = createButtonStyles(themeColors);
    const isActive = currentTheme === themeName;

    const handleDelete = () => {
      if (window.confirm(`Are you sure you want to delete the "${themeName}" theme?`)) {
        deleteCustomTheme(themeName);
      }
    };

    return (
      <Card 
        elevation={isActive ? 4 : 1}
        sx={{ 
          position: 'relative',
          border: isActive ? `2px solid ${colors.primary}` : '1px solid #e0e0e0',
          transition: 'all 0.3s ease-in-out',
          '&:hover': {
            elevation: 3,
            transform: 'translateY(-2px)'
          }
        }}
      >
        {isActive && (
          <Box sx={{ 
            position: 'absolute', 
            top: -8, 
            right: -8, 
            zIndex: 1 
          }}>
            <CheckCircleIcon sx={{ 
              color: colors.primary, 
              bgcolor: 'white', 
              borderRadius: '50%',
              fontSize: 24 
            }} />
          </Box>
        )}
        
        <CardContent sx={{ pb: 1 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h6" sx={{ fontWeight: 600 }}>
              {themeName}
            </Typography>
            <Chip 
              label="Custom" 
              size="small" 
              sx={{ 
                bgcolor: themeColors.primary + '20',
                color: themeColors.primary,
                fontSize: 10,
                fontWeight: 600
              }} 
            />
          </Box>
          
          {/* Color Palette Preview */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="caption" sx={{ color: 'text.secondary', mb: 1, display: 'block' }}>
              Color Palette
            </Typography>
            <Box sx={{ display: 'flex', gap: 0.5, mb: 2 }}>
              <Box sx={{ 
                width: 24, 
                height: 24, 
                bgcolor: themeColors.primary, 
                borderRadius: 1,
                border: '1px solid #ddd'
              }} />
              <Box sx={{ 
                width: 24, 
                height: 24, 
                bgcolor: themeColors.secondary, 
                borderRadius: 1,
                border: '1px solid #ddd'
              }} />
              <Box sx={{ 
                width: 24, 
                height: 24, 
                bgcolor: themeColors.background, 
                borderRadius: 1,
                border: '1px solid #ddd'
              }} />
              <Box sx={{ 
                width: 24, 
                height: 24, 
                bgcolor: themeColors.border, 
                borderRadius: 1,
                border: '1px solid #ddd'
              }} />
            </Box>
          </Box>

          {/* Button Preview */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="caption" sx={{ color: 'text.secondary', mb: 1, display: 'block' }}>
              Buttons
            </Typography>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <Button size="small" {...themeButtons.primary}>
                Primary
              </Button>
              <Button size="small" {...themeButtons.secondary}>
                Secondary
              </Button>
            </Box>
          </Box>

          {/* Paper Preview */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="caption" sx={{ color: 'text.secondary', mb: 1, display: 'block' }}>
              Paper & Icons
            </Typography>
            <Paper 
              elevation={0}
              sx={{ 
                p: 1.5, 
                bgcolor: themeColors.containerPaper,
                border: `1px solid ${themeColors.border}`,
                borderRadius: 2,
                mb: 1
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <SchoolIcon sx={{ color: themeColors.iconPrimary, fontSize: 20 }} />
                <Typography variant="body2" sx={{ color: themeColors.textPrimary }}>
                  Sample content
                </Typography>
              </Box>
            </Paper>
          </Box>

          {/* Side Menu Preview */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="caption" sx={{ color: 'text.secondary', mb: 1, display: 'block' }}>
              Side Menu
            </Typography>
            <Paper 
              elevation={2}
              sx={{ 
                bgcolor: themeColors.sideMenu,
                border: `1px solid ${themeColors.border}`,
                borderRadius: 2,
                overflow: 'hidden'
              }}
            >
              {[
                { icon: SchoolIcon, label: 'Classes' },
                { icon: PeopleIcon, label: 'Students' },
                { icon: PersonIcon, label: 'Staff' },
                { icon: MenuBookIcon, label: 'Lessons' },
                { icon: BuildIcon, label: 'Equipment' }
              ].map((item, index) => {
                const IconComponent = item.icon;
                return (
                  <Box 
                    key={item.label}
                    sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: 1.5,
                      p: 1.5,
                      bgcolor: 'transparent',
                      borderLeft: '3px solid transparent',
                      cursor: 'pointer',
                      '&:hover': {
                        bgcolor: themeColors.sideMenuHover
                      }
                    }}
                  >
                    <IconComponent sx={{ 
                      color: themeColors.sideMenuText, 
                      fontSize: 18 
                    }} />
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        color: themeColors.sideMenuText,
                        fontWeight: 400,
                        fontSize: 13
                      }}
                    >
                      {item.label}
                    </Typography>
                  </Box>
                );
              })}
            </Paper>
          </Box>
        </CardContent>
        
        <CardActions sx={{ pt: 0, justifyContent: 'space-between' }}>
          <Button 
            variant="outlined"
            size="small"
            onClick={handleDelete}
            sx={{
              color: '#e57373',
              borderColor: '#e57373',
              '&:hover': {
                bgcolor: '#e5737310',
                borderColor: '#c62828',
                color: '#c62828',
              }
            }}
          >
            Delete
          </Button>
          <Button 
            fullWidth
            variant={isActive ? "contained" : "outlined"}
            onClick={() => setTheme(themeName)}
            sx={{
              bgcolor: isActive ? themeColors.primary : 'transparent',
              color: isActive ? 'white' : themeColors.primary,
              borderColor: themeColors.primary,
              '&:hover': {
                bgcolor: isActive ? themeColors.primaryHover : themeColors.containerPaper,
                color: isActive ? 'white' : themeColors.primaryHover,
              }
            }}
          >
            {isActive ? 'Active Theme' : 'Select Theme'}
          </Button>
        </CardActions>
      </Card>
    );
  };

  const CustomThemePreview = ({ colors: previewColors }: { colors: any }) => {
    const customButtonStyles = createButtonStyles(previewColors);
    
    return (
      <Card elevation={2} sx={{ border: `2px solid ${previewColors.primary}` }}>
        <CardContent>
          <Typography variant="h6" sx={{ fontWeight: 600, mb: 2, color: previewColors.textPrimary }}>
            Your Custom Theme
          </Typography>
          
          {/* Color Palette Preview */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="caption" sx={{ color: previewColors.textSecondary, mb: 1, display: 'block' }}>
              Color Palette
            </Typography>
            <Box sx={{ display: 'flex', gap: 0.5, mb: 2, flexWrap: 'wrap' }}>
              <Box sx={{ width: 20, height: 20, bgcolor: previewColors.primary, borderRadius: 1, border: '1px solid #ddd' }} />
              <Box sx={{ width: 20, height: 20, bgcolor: previewColors.secondary, borderRadius: 1, border: '1px solid #ddd' }} />
              <Box sx={{ width: 20, height: 20, bgcolor: previewColors.background, borderRadius: 1, border: '1px solid #ddd' }} />
              <Box sx={{ width: 20, height: 20, bgcolor: previewColors.containerPaper, borderRadius: 1, border: '1px solid #ddd' }} />
              <Box sx={{ width: 20, height: 20, bgcolor: previewColors.border, borderRadius: 1, border: '1px solid #ddd' }} />
            </Box>
          </Box>

          {/* Button Preview */}
          <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
            <Button size="small" {...customButtonStyles.primary}>Primary</Button>
            <Button size="small" {...customButtonStyles.secondary}>Secondary</Button>
          </Box>

          {/* Sample Paper */}
          <Paper 
            elevation={0}
            sx={{ 
              p: 1.5, 
              bgcolor: previewColors.background,
              border: `1px solid ${previewColors.border}`,
              borderRadius: 2,
              mb: 2
            }}
          >
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <SchoolIcon sx={{ color: previewColors.iconPrimary, fontSize: 20 }} />
              <Typography variant="body2" sx={{ color: previewColors.textPrimary }}>
                Sample content with {' '}
                <span style={{ color: previewColors.textSecondary }}>secondary text</span>
              </Typography>
            </Box>
          </Paper>

          {/* Side Menu Preview (Dark Sidebar) */}
          <Paper 
            elevation={2}
            sx={{ 
              bgcolor: previewColors.sideMenu,
              border: `1px solid ${previewColors.border}`,
              borderRadius: 2,
              overflow: 'hidden',
              mb: 2
            }}
          >
            <Typography variant="caption" sx={{ color: previewColors.sideMenuText, p: 1.5, display: 'block', fontWeight: 600, fontSize: 12 }}>
              Side Menu (Sidebar)
            </Typography>
            {[
              { icon: SchoolIcon, label: 'Classes', active: false },
              { icon: PeopleIcon, label: 'Students', active: false },
              { icon: PersonIcon, label: 'Staff', active: false },
              { icon: MenuBookIcon, label: 'Lessons', active: false },
              { icon: BuildIcon, label: 'Equipment', active: false }
            ].map((item) => {
              const IconComponent = item.icon;
              return (
                <Box 
                  key={item.label}
                  sx={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: 1.5,
                    p: 1.5,
                    bgcolor: 'transparent',
                    borderLeft: '3px solid transparent',
                    cursor: 'pointer',
                    '&:hover': {
                      bgcolor: previewColors.sideMenuHover
                    }
                  }}
                >
                  <IconComponent sx={{ 
                    color: previewColors.sideMenuText, 
                    fontSize: 18 
                  }} />
                  <Typography 
                    variant="body2" 
                    sx={{ 
                      color: previewColors.sideMenuText,
                      fontWeight: 400,
                      fontSize: 14
                    }}
                  >
                    {item.label}
                  </Typography>
                </Box>
              );
            })}
          </Paper>

          {/* Dropdown Menu Preview */}
          <Paper 
            elevation={2}
            sx={{ 
              bgcolor: previewColors.dropdownMenu,
              border: `1px solid ${previewColors.border}`,
              borderRadius: 2,
              overflow: 'hidden'
            }}
          >
            <Typography variant="caption" sx={{ color: previewColors.dropdownMenuText, p: 1, display: 'block', borderBottom: `1px solid ${previewColors.border}`, fontWeight: 600 }}>
              Dropdown Menu
            </Typography>
            {[
              { icon: SchoolIcon, label: 'View Details', active: false },
              { icon: PeopleIcon, label: 'Edit Class', active: false },
              { icon: PaletteIcon, label: 'Duplicate', active: true },
              { icon: SettingsIcon, label: 'Settings', active: false }
            ].map((item) => {
              const IconComponent = item.icon;
              return (
                <Box 
                  key={item.label}
                  sx={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    gap: 1.5,
                    p: 1,
                    bgcolor: item.active ? previewColors.dropdownMenuHover : 'transparent'
                  }}
                >
                  <IconComponent sx={{ 
                    color: item.active ? previewColors.dropdownMenuIcon : previewColors.dropdownMenuText, 
                    fontSize: 16 
                  }} />
                  <Typography 
                    variant="caption" 
                    sx={{ 
                      color: item.active ? previewColors.dropdownMenuIcon : previewColors.dropdownMenuText,
                      fontWeight: item.active ? 600 : 400
                    }}
                  >
                    {item.label}
                  </Typography>
                </Box>
              );
            })}
          </Paper>
        </CardContent>
      </Card>
    );
  };

  const ThemePreview = ({ themeName }: { themeName: string }) => {
    const themeColors = themePresets[themeName];
    const themeButtons = createButtonStyles(themeColors);
    const isActive = currentTheme === themeName;

    return (
      <Card 
        elevation={isActive ? 4 : 1}
        sx={{ 
          position: 'relative',
          border: isActive ? `2px solid ${colors.primary}` : '1px solid #e0e0e0',
          transition: 'all 0.3s ease-in-out',
          '&:hover': {
            elevation: 3,
            transform: 'translateY(-2px)'
          }
        }}
      >
        {isActive && (
          <Box sx={{ 
            position: 'absolute', 
            top: -8, 
            right: -8, 
            zIndex: 1 
          }}>
            <CheckCircleIcon sx={{ 
              color: colors.primary, 
              bgcolor: 'white', 
              borderRadius: '50%',
              fontSize: 24 
            }} />
          </Box>
        )}
        
        <CardContent sx={{ pb: 1 }}>
          <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
            {themeDisplayNames[themeName]}
          </Typography>
          
          {/* Color Palette Preview */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="caption" sx={{ color: 'text.secondary', mb: 1, display: 'block' }}>
              Color Palette
            </Typography>
            <Box sx={{ display: 'flex', gap: 0.5, mb: 2 }}>
              <Box sx={{ 
                width: 24, 
                height: 24, 
                bgcolor: themeColors.primary, 
                borderRadius: 1,
                border: '1px solid #ddd'
              }} />
              <Box sx={{ 
                width: 24, 
                height: 24, 
                bgcolor: themeColors.secondary, 
                borderRadius: 1,
                border: '1px solid #ddd'
              }} />
              <Box sx={{ 
                width: 24, 
                height: 24, 
                bgcolor: themeColors.background, 
                borderRadius: 1,
                border: '1px solid #ddd'
              }} />
              <Box sx={{ 
                width: 24, 
                height: 24, 
                bgcolor: themeColors.border, 
                borderRadius: 1,
                border: '1px solid #ddd'
              }} />
            </Box>
          </Box>

          {/* Button Preview */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="caption" sx={{ color: 'text.secondary', mb: 1, display: 'block' }}>
              Buttons
            </Typography>
            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
              <Button size="small" {...themeButtons.primary}>
                Primary
              </Button>
              <Button size="small" {...themeButtons.secondary}>
                Secondary
              </Button>
            </Box>
          </Box>

          {/* Paper Preview */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="caption" sx={{ color: 'text.secondary', mb: 1, display: 'block' }}>
              Paper & Icons
            </Typography>
            <Paper 
              elevation={0}
              sx={{ 
                p: 1.5, 
                bgcolor: themeColors.containerPaper,
                border: `1px solid ${themeColors.border}`,
                borderRadius: 2
              }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <SchoolIcon sx={{ color: themeColors.iconPrimary, fontSize: 20 }} />
                <Typography variant="body2" sx={{ color: themeColors.textPrimary }}>
                  Sample content
                </Typography>
                <Chip 
                  label="Active" 
                  size="small" 
                  sx={{ 
                    bgcolor: themeColors.primary,
                    color: 'white',
                    fontSize: 10
                  }} 
                />
              </Box>
            </Paper>
          </Box>

          {/* Side Menu Preview */}
          <Box>
            <Typography variant="caption" sx={{ color: 'text.secondary', mb: 1, display: 'block' }}>
              Side Menu
            </Typography>
            <Paper 
              elevation={2}
              sx={{ 
                bgcolor: themeColors.sideMenu,
                border: `1px solid ${themeColors.border}`,
                borderRadius: 2,
                overflow: 'hidden',
                width: '100%'
              }}
            >
              {/* Menu Items */}
              {[
                { icon: SchoolIcon, label: 'Classes', active: false },
                { icon: PeopleIcon, label: 'Students', active: false },
                { icon: PersonIcon, label: 'Staff', active: false },
                { icon: MenuBookIcon, label: 'Lessons', active: false },
                { icon: BuildIcon, label: 'Equipment', active: false }
              ].map((item, index) => {
                const IconComponent = item.icon;
                return (
                  <Box 
                    key={item.label}
                    sx={{ 
                      display: 'flex', 
                      alignItems: 'center', 
                      gap: 1.5,
                      p: 1.5,
                      bgcolor: 'transparent',
                      borderLeft: '3px solid transparent',
                      cursor: 'pointer',
                      '&:hover': {
                        bgcolor: themeColors.sideMenuHover
                      }
                    }}
                  >
                    <IconComponent sx={{ 
                      color: themeColors.sideMenuText, 
                      fontSize: 18 
                    }} />
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        color: themeColors.sideMenuText,
                        fontWeight: 400,
                        fontSize: 13
                      }}
                    >
                      {item.label}
                    </Typography>
                  </Box>
                );
              })}
            </Paper>
          </Box>
        </CardContent>
        
        <CardActions sx={{ pt: 0 }}>
          <Button 
            fullWidth
            variant={isActive ? "contained" : "outlined"}
            onClick={() => setTheme(themeName)}
            sx={{
              bgcolor: isActive ? themeColors.primary : 'transparent',
              color: isActive ? 'white' : themeColors.primary,
              borderColor: themeColors.primary,
              '&:hover': {
                bgcolor: isActive ? themeColors.primaryHover : themeColors.containerPaper,
                color: isActive ? 'white' : themeColors.primaryHover,
              }
            }}
          >
            {isActive ? 'Active Theme' : 'Select Theme'}
          </Button>
        </CardActions>
      </Card>
    );
  };

  return (
    <Layout>
      <Box sx={{ p: 4, maxWidth: 1200, mx: 'auto' }}>
        <Box sx={{ mb: 4 }}>
          <Typography variant="h4" sx={{ fontWeight: 700, mb: 1 }}>
            Theme Settings
          </Typography>
          <Typography variant="body1" sx={{ color: 'text.secondary' }}>
            Choose your preferred color scheme for buttons, icons, papers, and the side menu.
            Your selection will be saved and applied across the entire application.
          </Typography>
        </Box>

        {/* Current Theme Info */}
        <Paper elevation={1} sx={{ p: 3, mb: 4, bgcolor: colors.background, border: `1px solid ${colors.border}` }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
            <PaletteIcon sx={{ color: colors.iconPrimary, fontSize: 32 }} />
            <Box>
              <Typography variant="h6" sx={{ fontWeight: 600 }}>
                Current Theme: {themeDisplayNames[currentTheme]}
              </Typography>
              <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                This theme is applied to all buttons, icons, papers, and navigation elements.
              </Typography>
            </Box>
          </Box>
          
          {/* Quick Actions with Current Theme */}
          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
            <Button {...buttonStyles.primary}>
              Primary Action
            </Button>
            <Button {...buttonStyles.secondary}>
              Secondary Action
            </Button>
            <IconButton sx={{ color: colors.iconPrimary }}>
              <SchoolIcon />
            </IconButton>
          </Box>
        </Paper>

        {/* Theme Selection */}
        <Typography variant="h5" sx={{ fontWeight: 600, mb: 3 }}>
          Available Themes
        </Typography>
        
        <Box sx={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
          gap: 3,
          mb: 4
        }}>
          {/* Default Theme */}
          <ThemePreview themeName="default" />
          
          {/* Custom Themes */}
          {Object.keys(customThemes).map((themeName) => (
            <CustomThemeCard key={themeName} themeName={themeName} />
          ))}
        </Box>

        {/* Custom Theme Creation */}
        <Paper elevation={1} sx={{ p: 3, mb: 4, bgcolor: colors.containerPaper, border: `1px solid ${colors.border}` }}>
          <Accordion 
            expanded={isCreatingCustom} 
            onChange={() => setIsCreatingCustom(!isCreatingCustom)}
            sx={{ boxShadow: 'none', bgcolor: 'transparent' }}
          >
            <AccordionSummary 
              expandIcon={<ExpandMoreIcon sx={{ color: colors.iconPrimary }} />}
              sx={{ px: 0 }}
            >
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <AddIcon sx={{ color: colors.iconPrimary, fontSize: 32 }} />
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    Create Your Own Theme
                  </Typography>
                  <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                    Design a custom color scheme tailored to your preferences
                  </Typography>
                </Box>
              </Box>
            </AccordionSummary>
            
            <AccordionDetails sx={{ px: 0, pt: 2 }}>
              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
                
                {/* Theme Name Input */}
                <TextField
                  label="Theme Name"
                  value={customTheme.name}
                  onChange={(e) => setCustomTheme(prev => ({ ...prev, name: e.target.value }))}
                  fullWidth
                  placeholder="e.g., My Custom Theme"
                  sx={{ mb: 2 }}
                />

                <Divider />

                {/* Color Input Fields */}
                <Typography variant="h6" sx={{ fontWeight: 600, mb: 1 }}>
                  Color Settings
                </Typography>
                <Typography variant="body2" sx={{ color: 'text.secondary', mb: 3 }}>
                  Choose your main colors below. Hover states, borders, and other variants will be automatically generated 
                  to create a cohesive color scheme.
                </Typography>
                
                <Box sx={{ 
                  display: 'grid', 
                  gridTemplateColumns: 'repeat(auto-fit, minmax(400px, 1fr))', 
                  gap: 3 
                }}>
                  {essentialColorFields.map((field) => {
                    const currentColor = customTheme.essentialColors[field.key as keyof EssentialColors];
                    return (
                      <Box key={field.key} sx={{ display: 'flex', flexDirection: 'column', gap: 2, p: 2, border: '1px solid #e0e7ff', borderRadius: 2 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                          <Box sx={{ 
                            width: 50, 
                            height: 50, 
                            bgcolor: currentColor, 
                            borderRadius: 2,
                            border: '2px solid #ddd',
                            cursor: 'pointer',
                            flexShrink: 0,
                            boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
                          }} />
                          <Box sx={{ flex: 1 }}>
                            <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 0.5 }}>
                              {field.label}
                            </Typography>
                            <Typography variant="caption" sx={{ color: 'text.secondary', display: 'block', mb: 1 }}>
                              {field.description}
                            </Typography>
                            <Typography variant="caption" sx={{ color: colors.primary, display: 'block', fontStyle: 'italic' }}>
                              Auto-generates: {field.autoGenerated.join(', ')}
                            </Typography>
                          </Box>
                        </Box>
                        
                        {/* Color Picker */}
                        <TextField
                          label="Choose Color"
                          value={currentColor}
                          onChange={(e) => handleEssentialColorChange(field.key as keyof EssentialColors, e.target.value)}
                          fullWidth
                          size="small"
                          type="color"
                          sx={{ 
                            '& input[type="color"]': {
                              width: '100%',
                              height: 40,
                              border: 'none',
                              cursor: 'pointer'
                            }
                          }}
                        />
                      </Box>
                    );
                  })}
                </Box>

                <Divider />

                {/* Preview and Actions */}
                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    Preview Your Theme
                  </Typography>
                  
                  <CustomThemePreview colors={generateColorPalette(customTheme.essentialColors)} />
                  
                  <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end' }}>
                    <Button 
                      onClick={resetCustomTheme}
                      {...buttonStyles.cancel}
                    >
                      Reset
                    </Button>
                    <Button 
                      onClick={applyCustomTheme}
                      startIcon={<SaveIcon />}
                      {...buttonStyles.primary}
                      disabled={!customTheme.name.trim()}
                    >
                      Save & Apply Theme
                    </Button>
                  </Box>
                  
                  {previewCustom && (
                    <Paper 
                      elevation={2} 
                      sx={{ 
                        p: 2, 
                        bgcolor: customTheme.essentialColors.primary + '10', 
                        border: `1px solid ${customTheme.essentialColors.primary}`
                      }}
                    >
                      <Typography sx={{ fontWeight: 600, color: customTheme.essentialColors.primary }}>
                        ✨ Theme Saved & Applied!
                      </Typography>
                      <Typography variant="body2" sx={{ color: 'text.secondary' }}>
                        Your custom theme "{customTheme.name}" has been saved and is now active. 
                        You can see it in the "Available Themes" section above.
                      </Typography>
                    </Paper>
                  )}
                </Box>
              </Box>
            </AccordionDetails>
          </Accordion>
        </Paper>

        {/* Preview Section */}
        <Paper elevation={1} sx={{ p: 3, bgcolor: colors.containerPaper, border: `1px solid ${colors.border}` }}>
          <Typography variant="h6" sx={{ fontWeight: 600, mb: 2 }}>
            Current Theme Preview
          </Typography>
          <Typography variant="body2" sx={{ color: 'text.secondary', mb: 3 }}>
            See how your current theme looks across different UI elements.
          </Typography>
          
          {/* Sample Paper */}
          <Paper 
            elevation={0}
            sx={{ 
              p: 2, 
              bgcolor: colors.containerPaper, 
              border: `1px solid ${colors.border}`,
              borderRadius: 2 
            }}
          >
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <SchoolIcon sx={{ color: colors.iconPrimary, fontSize: 24 }} />
              <Box>
                <Typography variant="h6" sx={{ fontWeight: 600, color: colors.textPrimary }}>
                  Sample Content
                </Typography>
                <Typography variant="body2" sx={{ color: colors.textSecondary }}>
                  This shows how your theme colors appear in real UI elements.
                </Typography>
              </Box>
            </Box>
          </Paper>
        </Paper>
      </Box>
    </Layout>
  );
} 